?InsectSprays
data("InsectSprays")
str(InsectSprays) # count <- numerical variable  # spray <- categorical
# Boxplot
plot(count~spray, data=InsectSprays,
xlab="Types of Insecticide",
ylab="Counts of Insects")
anova(lm(count~spray, data = InsectSprays))
require(MASS)
boxplot(InsectSprays$count ~ InsectSprays$spray)
require("RColorBrewer")
boxplot(InsectSprays$count ~ InsectSprays$spray,
col = brewer.pal(6, "Set3"),
names = c("A",
"B",
"C",
"D",
"E",
"F"),
boxwex = 0.5, # width of box
whisklty = 1, # whisker line type: 1 = solid line
outpch = 16, # outlier symbole: 16 = filled circle
outcol = brewer.pal(8, "Set3"), # outlier color
main = "Effects of Insecticides on Insects",
xlab = "Insecticide",
ylab = "Insect Count"
)
detach("package:MASS", unload = TRUE)
detach("package:RColorBrewer", unload = TRUE)
rm(list = ls())
dev.off()
help(state.x77)
?state.x77
statedata = as.data.frame(state.x77)
View(statedata)
View(statedata)
colnames(statedata) = c("pop", "inc", "illit", "life.exp", "murder", "hs.grad", "frost", "area")
plot(life.exp~inc, data=statedata)
cor(statedata[,"life.exp"], statedata[,"inc"])
browseURL("https://www.socialresearchmethods.net/kb/statcorr.php") # info on correlation
browseURL("https://www.socialresearchmethods.net/kb/statcorr.php") # info on correlation
plot(life.exp~inc, data=statedate, type="n")
plot(life.exp~inc, data=statedata, type="n")
text(life.exp~inc, data=statedata, state.abb)
?state.abb
lm(life.exp ~ inc, data = statedata)
reg1 <- lm(life.exp ~ inc, data = statedata)
summary(reg1)
reg1
plot(life.exp~inc, data=statedata,
xlab="Income", ylab="Life Expectancy")
abline(reg1)
par(mfrow=c(2,2)) # Create panel of four plotting areas
selected.states <- sample(1:50, 10)
points(statedata[selected.states,"inc"],
statedata[selected.states, "life.exp"], pch = 16, col = 2)
# Fit regression line using sample
model.sel = lm(life.exp~inc, data = statedata[selected.states,])
abline(reg1, col=2)
# Make a confidence band
# step 1: calculate width of band, W
ww = sqrt(2*qf(0.95, 2, nrow(statedata)-2))
# generate plotting x values
plot.x <- data.frame(inc = seq(3000, 7000, 1))
# generate plotting X values
plot.x <- data.frame(inc=seq(300, 7000, 1))
se.fit=T # an option to save
# Standard error of fitted values
plot.fit <- predict(model.sel, plot.x,
level=0.95, interval="confidence",
se.fit=T)
# Lines is a function to add connected lines to an existing plot
lines(plot.x$inc, plot.fit$fit[,1]+ww*plot.fit$se.fit,
col=2, lty=2)
lines(plot.x$inc, plot.fit$fit[,1]-ww*plot.fit$se.fit,
col=2, lty=2)
}
# Step 5: Using for loop, run identical regression analysis
# On 4 randomly selected samples
par(mfrow=c(2,2)) # Create panel of four plotting areas
# for loop
for(i in 1:4){
# Plot population
plot(life.exp~inc, data=statedata,
xlab="Income", ylab="Life Expectancy",
main=paste("Random sample", format(i)),
ylim=c(min(life.exp), max(life.exp)+0.3))
abline(reg1)
if(i==1){
legend(3030, 74.2,
pch = c(NA, NA, NA, 1, 16),
lty = c(1, 1, 2, NA, NA),
col = c(1, 2, 2, 1, 2),
c("population truth", "sample estimate",
"sample confidence band",
"states", "sampled"),
cex = 0.7,
bty = "n"
)
}
# Select the sample
selected.states <- sample(1:50, 10)
points(statedata[selected.states,"inc"],
statedata[selected.states, "life.exp"], pch = 16, col = 2)
# Fit regression line using sample
model.sel = lm(life.exp~inc, data = statedata[selected.states,])
abline(reg1, col=2)
# Make a confidence band
# step 1: calculate width of band, W
ww = sqrt(2*qf(0.95, 2, nrow(statedata)-2))
# generate plotting x values
plot.x <- data.frame(inc = seq(3000, 7000, 1))
# generate plotting X values
plot.x <- data.frame(inc=seq(300, 7000, 1))
se.fit=T # an option to save
# Standard error of fitted values
plot.fit <- predict(model.sel, plot.x,
level=0.95, interval="confidence",
se.fit=T)
# Lines is a function to add connected lines to an existing plot
lines(plot.x$inc, plot.fit$fit[,1]+ww*plot.fit$se.fit,
col=2, lty=2)
lines(plot.x$inc, plot.fit$fit[,1]-ww*plot.fit$se.fit,
col=2, lty=2)
}
# Step 5: Using for loop, run identical regression analysis
# On 4 randomly selected samples
par(mfrow=c(2,2)) # Create panel of four plotting areas
# for loop
for(i in 1:4){
# Plot population
plot(life.exp~inc, data=statedata,
xlab="Income", ylab="Life Expectancy",
main=paste("Random sample", format(i)),
ylim=c(min(life.exp), max(life.exp)+0.3))
abline(reg1)
if(i==1){
legend(3030, 74.2,
pch = c(NA, NA, NA, 1, 16),
lty = c(1, 1, 2, NA, NA),
col = c(1, 2, 2, 1, 2),
c("population truth", "sample estimate",
"sample confidence band",
"states", "sampled"),
cex = 0.7,
bty = "n"
)
}
# Select the sample
selected.states <- sample(1:50, 10)
points(statedata[selected.states,"inc"],
statedata[selected.states, "life.exp"], pch = 16, col = 2)
# Fit regression line using sample
model.sel = lm(life.exp~inc, data = statedata[selected.states,])
abline(reg1, col=2)
# Make a confidence band
# step 1: calculate width of band, W
ww = sqrt(2*qf(0.95, 2, nrow(statedata)-2))
# generate plotting x values
plot.x <- data.frame(inc = seq(3000, 7000, 1))
# generate plotting X values
plot.x <- data.frame(inc=seq(300, 7000, 1))
se.fit=T # an option to save
# Standard error of fitted values
plot.fit <- predict(model.sel, plot.x,
level=0.95, interval="confidence",
se.fit=T)
# Lines is a function to add connected lines to an existing plot
lines(plot.x$inc, plot.fit$fit[,1]+ww*plot.fit$se.fit,
col=2, lty=2)
lines(plot.x$inc, plot.fit$fit[,1]-ww*plot.fit$se.fit,
col=2, lty=2)
}
# Step 5: Using for loop, run identical regression analysis
# On 4 randomly selected samples
par(mfrow=c(2,2)) # Create panel of four plotting areas
# for loop
for(i in 1:4){
# Plot population
plot(life.exp~inc, data=statedata,
xlab="Income", ylab="Life Expectancy",
main=paste("Random sample", format(i)),
ylim=c(min(life.exp), max(life.exp)+0.3))
abline(reg1)
if(i==1){
legend(3030, 74.2,
pch = c(NA, NA, NA, 1, 16),
lty = c(1, 1, 2, NA, NA),
col = c(1, 2, 2, 1, 2),
c("population truth", "sample estimate",
"sample confidence band",
"states", "sampled"),
cex = 0.7,
bty = "n"
)
}
# Select the sample
selected.states <- sample(1:50, 10)
points(statedata[selected.states,"inc"],
statedata[selected.states, "life.exp"], pch = 16, col = 2)
# Fit regression line using sample
model.sel = lm(life.exp~inc, data = statedata[selected.states,])
abline(reg1, col=2)
# Make a confidence band
# step 1: calculate width of band, W
ww = sqrt(2*qf(0.95, 2, nrow(statedata)-2))
# generate plotting x values
plot.x <- data.frame(inc = seq(3000, 7000, 1))
# generate plotting X values
plot.x <- data.frame(inc=seq(300, 7000, 1))
se.fit=T # an option to save
# Standard error of fitted values
plot.fit <- predict(model.sel, plot.x,
level=0.95, interval="confidence",
se.fit=T)
# Lines is a function to add connected lines to an existing plot
lines(plot.x$inc, plot.fit$fit[,1]+ww*plot.fit$se.fit,
col=2, lty=2)
lines(plot.x$inc, plot.fit$fit[,1]-ww*plot.fit$se.fit,
col=2, lty=2)
}
# Step 5: Using for loop, run identical regression analysis
# On 4 randomly selected samples
par(mfrow=c(2,2)) # Create panel of four plotting areas
# for loop
for(i in 1:4){
# Plot population
plot(life.exp~inc, data=statedata,
xlab="Income", ylab="Life Expectancy",
main=paste("Random sample", format(i)),
ylim=c(min(life.exp), max(life.exp)+0.3))
abline(reg1)
if(i==1){
legend(3030, 74.2,
pch = c(NA, NA, NA, 1, 16),
lty = c(1, 1, 2, NA, NA),
col = c(1, 2, 2, 1, 2),
c("population truth", "sample estimate",
"sample confidence band",
"states", "sampled"),
cex = 0.7,
bty = "n"
)
}
# Select the sample
selected.states <- sample(1:50, 10)
points(statedata[selected.states,"inc"],
statedata[selected.states, "life.exp"], pch = 16, col = 2)
# Fit regression line using sample
model.sel = lm(life.exp~inc, data = statedata[selected.states,])
abline(reg1, col=2)
# Make a confidence band
# step 1: calculate width of band, W
ww = sqrt(2*qf(0.95, 2, nrow(statedata)-2))
# generate plotting x values
plot.x <- data.frame(inc = seq(3000, 7000, 1))
# generate plotting X values
plot.x <- data.frame(inc=seq(300, 7000, 1))
se.fit=T # an option to save
# Standard error of fitted values
plot.fit <- predict(model.sel, plot.x,
level=0.95, interval="confidence",
se.fit=T)
# Lines is a function to add connected lines to an existing plot
lines(plot.x$inc, plot.fit$fit[,1]+ww*plot.fit$se.fit,
col=2, lty=2)
lines(plot.x$inc, plot.fit$fit[,1]-ww*plot.fit$se.fit,
col=2, lty=2)
}
# for loop
for(i in 1:4){
# Plot population
plot(life.exp~inc, data=statedata,
xlab="Income", ylab="Life Expectancy",
main=paste("Random sample", format(i)),
ylim=c(min(life.exp), max(life.exp)+0.3))
abline(reg1)
if(i==1){
legend(3030, 74.2,
pch = c(NA, NA, NA, 1, 16),
lty = c(1, 1, 2, NA, NA),
col = c(1, 2, 2, 1, 2),
c("population truth", "sample estimate",
"sample confidence band",
"states", "sampled"),
cex = 0.7,
bty = "n"
)
}
# Select the sample
selected.states <- sample(1:50, 10)
points(statedata[selected.states,"inc"],
statedata[selected.states, "life.exp"], pch = 16, col = 2)
# Fit regression line using sample
model.sel = lm(life.exp~inc, data = statedata[selected.states,])
abline(reg1, col=2)
# Make a confidence band
# step 1: calculate width of band, W
ww = sqrt(2*qf(0.95, 2, nrow(statedata)-2))
# generate plotting x values
plot.x <- data.frame(inc = seq(3000, 7000, 1))
# generate plotting X values
plot.x <- data.frame(inc=seq(300, 7000, 1))
se.fit=T # an option to save
# Standard error of fitted values
plot.fit <- predict(model.sel, plot.x,
level=0.95, interval="confidence",
se.fit=T)
# Lines is a function to add connected lines to an existing plot
lines(plot.x$inc, plot.fit$fit[,1]+ww*plot.fit$se.fit,
col=2, lty=2)
lines(plot.x$inc, plot.fit$fit[,1]-ww*plot.fit$se.fit,
col=2, lty=2)
}
rm(list = ls())
dev.off()
