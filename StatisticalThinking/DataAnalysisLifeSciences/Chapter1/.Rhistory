fmweight <- read.csv("C:\\Users\\loret\\Desktop\\DataSciencePrep\\R\\R_StatisticsEssentialTraining\\StatisticalThinking\\DataAnalysisLifeSciences\\extdata\\femaleMiceWeights.csv")  # access dataset
View(fmweight)
View(fmweight)
set.seed(1)
browseURL("http://genomicsclass.github.io/book/pages/random_variables.html") # book source
for (i in 1:n) {
control <- sample(population$Bodyweight,12)
treatment <- sample(population$Bodyweight,12)
nulldiff <- mean(treatment) - mean(control)
j <- pmax(pmin(round(nulldiff) + 6,11),1)
totals[j] <- totals[j] + 1
text(j-6, totals[j], pch=15, round(nulldiff,1))
##if(i < 15) Sys.sleep(1) ##You can add this line to see values appear slowly
}
i <- 1:1000
i
rm(i)
for (i in 1:1000)
{
s1 <- sample(fmweight,5)
print(s1)
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(s1)
}
s1
x <- for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(s1)
}
x
rm(x)
x <- for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(mean(s1))
}
rm(x)
x <- unlist(population) # change from dataset to numbers
population <- read.csv("C:\\Users\\loret\\Desktop\\DataSciencePrep\\R\\R_StatisticsEssentialTraining\\StatisticalThinking\\DataAnalysisLifeSciences\\extdata\\femaleControlsPopulation.csv")
x <- unlist(population) # change from dataset to numbers
mean(x) # get average
ax <- mean(x) # get average
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(mean(s1))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(which(mean(s1) > s1))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(which(mean(s1) > s1) * 100)
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((mean(s1)))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((s1))
}
ax
s <- sample(x, 5, replace=TRUE) # take random sample of size 5 with set.seed(1)
diff <- mean(s) - mean(x)
abs(diff)
set.seed(1)
s <- sample(x, 5, replace=TRUE) # take random sample of size 5 with set.seed(1)
abs(diff)
set.seed(1)
s <- sample(x, 5, replace=TRUE) # take random sample of size 5 with set.seed(1)
diff <- mean(s) - mean(x)
abs(diff)
set.seed(1)
s <- sample(x, 5) # take random sample of size 5 with set.seed(1)
s
diff <- mean(s) - mean(x)
abs(diff)
set.seed(5)
s2 <- sample(x, 5)
diff2 <- mean(s2) - mean(x)
abs(diff2)
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((s1))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(mean((s1)))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(mean((s1)) - ax)
}
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax) > 1)   # Abs of diff. between means of random sample and ax (population average)
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax))   # Abs of diff. between means of random sample & population
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax) > 1)   # Abs of diff. between means of random sample & population
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((abs(mean((s1)) - ax) > 1)* 100)   # Abs of diff. between means of random sample & population in bullion (true/false) form
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((abs(mean((s1)) - ax) > 1)* 1)   # Abs of diff. between means of random sample & population in bullion (true/false) form
}
?count
?count?
?count
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax) > 1)   # Abs of diff. between means of random sample & population in bullion (true/false) form
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax))   # Abs of diff. between means of random sample & population
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax) > 1)   # Abs of diff. between means of random sample & population in bullion (true/false) form
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((abs(mean((s1)) - ax) > 1)* 1)   # Abs of diff. between means of random sample & population in bullion (true/false) form - dummified (0 = false, 1 = true)
}
n <- 10000
nulls <- vector("numeric", n)
n <- 10000
nulls <- vector("numeric", n)
for(i in 1:n){
control <- sample(population, 12)
treatment <- sample(population, 12)
nulls[i] <- mean(treatment)-mean(control)
}
n <- 10000
nulls <- vector("numeric", n)
for(i in 1:n){
control <- sample(population$Bodyweight, 12)
treatment <- sample(population$Bodyweight, 12)
nulls[i] <- mean(treatment)-mean(control)
}
nulls
hist(nulls)
set.seed(1)
n <- 1000
nulls2 <- vector("numeric", n)
n <- 1000
nulls2 <- vector("numeric", n)
for(i in 1:n){
control <- sample(population$Bodyweight, 5)
nulls2[i] <- mean(control)
}
hist(nulls2)
diff <- ax - nulls2
diff
hist(diff)
prop.table(diff)
prop.table(diff)
prop.table(diff > 1)
hist(diff)
length(nulls2)
length(nulls2 > 1)
length(nulls2 >= 1)
length(nulls2)
length(ax)
x <- unlist(population) # change from dataset to numbers
ax <- mean(x) # get average
length(ax)
ax
min(nulls2)
max(nulls2)
hist(nulls2)
abline(v = ax, col = "red", lwd = 2)
ax
browseURL("https://www.r-bloggers.com/proportions-with-mean/") # proportions with mean
d <- abs(ax - nulls2)
d
away1 <- d > 1
away1
mean(away1)
n2 <- 10000
nulls3 <- vector("numeric", n)
for(i in 1:n){
control <- sample(population$Bodyweight, 5)
nulls3[i] <- mean(control)
}
d2 <- abs(nulls3 - ax)
away2 <- d2 > 1
mean(away2)
set.seed(1)
n2 <- 10000
nulls3 <- vector("numeric", n)
for(i in 1:n){
control <- sample(population$Bodyweight, 5)
nulls3[i] <- mean(control)
}
d2 <- abs(nulls3 - ax)
away2 <- d2 > 1
mean(away2) # proportion of these 10,000 averages are more than 1 gram away from the average of x:
set.seed(1)
n3 <- 1000
n <- 1000
nulls4 <- vector("numeric", n)
set.seed(1)
# increase it from 1,000 to 10,000
n <- 1000
nulls4 <- vector("numeric", n)
for(i in 1:n){
control <- sample(population$Bodyweight, 50)
nulls4[i] <- mean(control)
}
d3 <- abs(nulls - ax)
away3 <- d3 > 1
mean(away3)
set.seed(1)
n <- 1000
nulls4 <- vector("numeric", n)
for(i in 1:n){
control <- sample(population$Bodyweight, 50)
nulls4[i] <- mean(control)
}
d3 <- abs(nulls4 - ax)
away3 <- d3 > 1
mean(away3)
rm(list = ls())
install.packages("gapminder")
?gapminder
?gapminder
require("gapminder")
?gapminder
keepers <- with(gap_with_colors,
continent %in% c("Africa", "Europe") & year == 2007)
plot(lifeExp ~ gdpPercap, gap_with_colors,
subset = keepers, log = "x", pch = 21,
cex = sqrt(gap_with_colors$pop[keepers]/pi)/1500,
bg = gap_with_colors$cc[keepers])
gap_with_colors <- data.frame(gapminder,
cc = I(country_colors[match(gapminder$country,
names(country_colors))]))
keepers <- with(gap_with_colors,
continent %in% c("Africa", "Europe") & year == 2007)
plot(lifeExp ~ gdpPercap, gap_with_colors,
subset = keepers, log = "x", pch = 21,
cex = sqrt(gap_with_colors$pop[keepers]/pi)/1500,
bg = gap_with_colors$cc[keepers])
keepers <- with(gap_with_colors,
continent %in% c("Africa", "Europe") & year == 1957)
plot(lifeExp ~ gdpPercap, gap_with_colors,
subset = keepers, log = "x", pch = 21,
cex = sqrt(gap_with_colors$pop[keepers]/pi)/1500,
bg = gap_with_colors$cc[keepers])
View(gapminder)
data("gapminder")
head(gapminder)
tail(gapminder)
gap_with_colors <- data.frame(gapminder,
cc = I(country_colors[match(gapminder$country,
names(country_colors))]))
?gapminder
require("gapminder")
data("gapminder")
tail(gapminder)
gap_with_colors <- data.frame(gapminder,
cc = I(country_colors[match(gapminder$country,
names(country_colors))]))
keepers <- with(gap_with_colors,
continent %in% c("Africa", "Europe") & year == 1957)
plot(lifeExp ~ gdpPercap, gap_with_colors,
subset = keepers, log = "x", pch = 21,
cex = sqrt(gap_with_colors$pop[keepers]/pi)/1500,
bg = gap_with_colors$cc[keepers])
gapminder
countriesy52 <- with(gapminder, gapminder$year == 1957
& gapminder$lifeExp <= 40 )
head(countriesy52)
countriesy52 <- unlist(gapminder, gapminder$year == 1957
& gapminder$lifeExp <= 40 )
head(countriesy52)
rm(list = ls())
dev.off()
install.packages("gapminder")
require("gapminder")
data("gapminder")
tail(gapminder)
gapminder
countriesy52 <- unlist(gapminder, gapminder$year == 1957
& gapminder$lifeExp <= 40 )
head(countriesy52)
View(gapminder)
mydata <- gapminder$country & gapminder$year & gapminder$lifeExp
mydata <- data.frame("count" = gapminder$country,
"yr" = gapminder$year,
"life" = gapminder$lifeExp)
View(mydata)
mydata[mydata$yr == 1952]
myyear <- mydata$yr == 1952
myyear
syear <- mydata[mydata$yr == 1957]
str(mydata) # get structure
syear <- mydata[mydata$yr == 1957, ]
syear
lefourty <- syear[syear$life <= 40, ] # retreives all the rows with life expectancy <= 40 + all columns
mean(syear$life)
mean(syear)
mean(syear$life)
median(sy)
median(syear$life)
max(syear$life)
min(syear$life)
View(syear)
View(syear)
mean(lefourty)
mean(lefourty)
mean(lefourty$life)
View(lefourty)
p <- (lefourty$life/syear$life)
usyear <- unist(syear$life)
usyear <- unlist(syear$life)
usyear
unlist(lefourty)
ulef <- unlist(lefourty$life)
p <- (ulef/usyear)
rm(list = ls())
dev.off()
library(UsingR)
x <- father.son$fheight
round(sample(x,10),1)
smallest <- floor( min(x))
largest <- ceiling(max(x))
values <- seq(smallest, largest, len=300)
heightecdf <- ecdf(x)
plot(values, heightecdf(values), type = "1",
xlab = "a (Height in inches)", ylab = "Pr(x <= a)")
smallest <- floor( min(x))
largest <- ceiling(max(x))
values <- seq(smallest, largest, len=300)
heightecdf <- ecdf(x)
plot(values, heightecdf(values), type = "1",
xlab = "a (Height in inches)", ylab = "Pr(x <= a)")
smallest <- floor( min(x))
largest <- ceiling(max(x))
values <- seq(smallest, largest, len=300)
heightecdf <- ecdf(x)
plot(values, heightecdf(values),
xlab = "a (Height in inches)", ylab = "Pr(x <= a)")
plot(values, heightecdf(values),type = "1"
xlab = "a (Height in inches)", ylab = "Pr(x <= a)")
plot(values, heightecdf(values),type = "1"
xlab = "a (Height in inches)", ylab = "Pr(x <= a)")
plot(values, heightecdf(values),
xlab = "a (Height in inches)", ylab = "Pr(x <= a)")
plot(values, heightecdf(values),type = "1",
xlab = "a (Height in inches)", ylab = "Pr(x <= a)")
plot(values, heightecdf(values),
xlab = "a (Height in inches)", ylab = "Pr(x <= a)")
install.packages("gapminder")
require("gapminder")
data("gapminder")
mydata <- data.frame("count" = gapminder$country,
"yr" = gapminder$year,
"life" = gapminder$lifeExp)
View(mydata)
lfourty <- mydata[mydata$yr == 1952, ]
lfourty
y <- lfourty$life
y
ecdf(y)
plot(ecdf(y))
hist(x)
bins <- seg(smallest, largest)
bins <- seq(smallest, largest)
bins <- seq(smallest, largest)
hist(x, breaks = bins, xlab = "Height (in inches)", main = "Adult men heights")
rm(list = ls())
dev.off()
dat <- read.csv("C:\\Users\\loret\\Desktop\\DataSciencePrep\\R\\R_StatisticsEssentialTraining\\StatisticalThinking\\DataAnalysisLifeSciences\\extdata.csv")
dat <- read.csv("C:\\Users\\loret\\Desktop\\DataSciencePrep\\R\\R_StatisticsEssentialTraining\\StatisticalThinking\\DataAnalysisLifeSciences\\extdata\\mice_pheno.csv")
View(dat)
library(dplyr)
controlPopulation <- filter(dat, Sex == "F" & Diet == "chow") %>%
controlPopulation <- filter(dat, Sex == "F" & Diet == "chow") %>%
controlPopulation
controlPopulation <- filter(dat, Sex == "F"
& Diet == "chow") %>%
select(Bodyweight) %>% unlist
length(controlPopulation)
controlPopulation <- filter(dat, Sex == "F"
& Diet == "chow") %>%
select(Bodyweight) %>% unlist
length(controlPopulation)
hfPopulation <- filter(dat, Sex == "F"
& Diet == "hf") %>%
select(Bodyweight) %>% unlist
length(hfPopulation)
rm(list = ls())
dat <- read.csv("C:\\Users\\loret\\Desktop\\DataSciencePrep\\R\\R_StatisticsEssentialTraining\\StatisticalThinking\\DataAnalysisLifeSciences\\extdata\\mice_pheno.csv")
dat <- na.omit(dat)
library(dplyr)
info(dat)
View(dat)
str(dat) # get structure (overview) of dataset
x <- filter(dat, Sex == "M"
& Diet == "chow") %>%
select(Bodyweight) %>% unlist
x
mean(x) # population average
rm(list = ls())
