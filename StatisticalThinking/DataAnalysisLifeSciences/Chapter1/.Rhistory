fmweight <- read.csv("C:\\Users\\loret\\Desktop\\DataSciencePrep\\R\\R_StatisticsEssentialTraining\\StatisticalThinking\\DataAnalysisLifeSciences\\extdata\\femaleMiceWeights.csv")  # access dataset
View(fmweight)
View(fmweight)
set.seed(1)
browseURL("http://genomicsclass.github.io/book/pages/random_variables.html") # book source
for (i in 1:n) {
control <- sample(population$Bodyweight,12)
treatment <- sample(population$Bodyweight,12)
nulldiff <- mean(treatment) - mean(control)
j <- pmax(pmin(round(nulldiff) + 6,11),1)
totals[j] <- totals[j] + 1
text(j-6, totals[j], pch=15, round(nulldiff,1))
##if(i < 15) Sys.sleep(1) ##You can add this line to see values appear slowly
}
i <- 1:1000
i
rm(i)
for (i in 1:1000)
{
s1 <- sample(fmweight,5)
print(s1)
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(s1)
}
s1
x <- for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(s1)
}
x
rm(x)
x <- for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(mean(s1))
}
rm(x)
x <- unlist(population) # change from dataset to numbers
population <- read.csv("C:\\Users\\loret\\Desktop\\DataSciencePrep\\R\\R_StatisticsEssentialTraining\\StatisticalThinking\\DataAnalysisLifeSciences\\extdata\\femaleControlsPopulation.csv")
x <- unlist(population) # change from dataset to numbers
mean(x) # get average
ax <- mean(x) # get average
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(mean(s1))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(which(mean(s1) > s1))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(which(mean(s1) > s1) * 100)
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((mean(s1)))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((s1))
}
ax
s <- sample(x, 5, replace=TRUE) # take random sample of size 5 with set.seed(1)
diff <- mean(s) - mean(x)
abs(diff)
set.seed(1)
s <- sample(x, 5, replace=TRUE) # take random sample of size 5 with set.seed(1)
abs(diff)
set.seed(1)
s <- sample(x, 5, replace=TRUE) # take random sample of size 5 with set.seed(1)
diff <- mean(s) - mean(x)
abs(diff)
set.seed(1)
s <- sample(x, 5) # take random sample of size 5 with set.seed(1)
s
diff <- mean(s) - mean(x)
abs(diff)
set.seed(5)
s2 <- sample(x, 5)
diff2 <- mean(s2) - mean(x)
abs(diff2)
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((s1))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(mean((s1)))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(mean((s1)) - ax)
}
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax))
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax) > 1)   # Abs of diff. between means of random sample and ax (population average)
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax))   # Abs of diff. between means of random sample & population
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax) > 1)   # Abs of diff. between means of random sample & population
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((abs(mean((s1)) - ax) > 1)* 100)   # Abs of diff. between means of random sample & population in bullion (true/false) form
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((abs(mean((s1)) - ax) > 1)* 1)   # Abs of diff. between means of random sample & population in bullion (true/false) form
}
?count
?count?
?count
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax) > 1)   # Abs of diff. between means of random sample & population in bullion (true/false) form
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax))   # Abs of diff. between means of random sample & population
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print(abs(mean((s1)) - ax) > 1)   # Abs of diff. between means of random sample & population in bullion (true/false) form
}
for (i in 1:1000)
{
s1 <- sample(fmweight$Bodyweight,5)
print((abs(mean((s1)) - ax) > 1)* 1)   # Abs of diff. between means of random sample & population in bullion (true/false) form - dummified (0 = false, 1 = true)
}
