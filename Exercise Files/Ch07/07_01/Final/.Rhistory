?swiss
cor(swiss)
round(cor(swiss), 2)  # Rounded to 2 decimals
cor.test(swiss$Fertility, swiss$Education)
install.packages("Hmisc")
require("Hmisc")
rcorr(as.matrix(swiss))
cor.test(swiss$Fertility, swiss$Education)
rcorr(as.matrix(swiss))
rm(list = ls())
data(swiss)
swiss
View(swiss)
cor(swiss)
round(cor(swiss), 2)
cor.test(swiss)
cor.test(swiss$Fertility)
cor.test(swiss$Fertility ~ swiss$Education)
?cor.test
cor.test(swiss$Fertility ~ swiss$Education)
cor.test(swiss$Fertility, swiss$Education)
cor.test(swiss$Education, swiss$Fertility)
?Hmisc
?hmisc
detach("package:Hmisc", unload = TRUE)
require(Hmisc)
?rcorr
rcorr(as.matrix(swiss))
corr(swiss$Fertility, swiss$Education)
rcorr(swiss$Fertility, swiss$Education)
detach(hmisc)
detach(Hmisc)
detach(hmisc)
detach(package:hmisc, unload = 'TRUE')
detach('package:hmisc', unload = TRUE)
detach('package:Hmisc', unload = TRUE)
detach('package: survival', unload = TRUE)
detach('package: survival', unload = TRUE)
detach('package: survival', unload = TRUE)
?survival
rm(list = ls())
?trees
data(trees)
trees[1:5, ]  # Show first 5 lines
hist(trees$Height)
hist(trees$Girth) # girth = diameter of tress in inches measured at 4ft 6in above ground
plot(trees$Girth, trees$Height)
abline(lm(trees$Height ~ trees$Girth))
reg1 <- lm(Height ~ Girth, data = trees)
reg1
confint(reg1)
predict(reg1)  # Predicted height based on girth
predict(reg1, interval = "prediction")  # CI for predicted height
lm.influence(reg1)
influence.measures(reg1)
rm(list = ls())  # Clean up
dev.off()
?trees
data(trees)
trees
trees[1:10, ]
hist(trees$Height)
hist(trees$Girth)
plot(trees$Girth, trees$Height)
abline(trees$Girth, trees$Height)
abline(lm(trees$Girth, trees$Height))
abline(lm(trees$Height ~ trees$Girth))
girthonHeight <- lm(Girth ~ Height, data = trees)
(girthonHeight) <- GirthonHeight
names(girthonHeight)[names(girthonHeight) == 'girthonHeight'] <- 'GirthonHeight'
girthonHeight
GirthonHeight
summary(girthonHeight)
confint
confint(girthonHeight)
lm.influence(girthonHeight)
?predict
predict(girthonHeight)
lm.influence(girthonHeight)
?lm.influence()
?influence.measures
influence.measures(girthonHeight)
rm(list = ls())
dev.off()
?sleep
sleep[1:5, ]
sleep
data(sleep)
sd <- sleep[, 1:2]  # Save just the first two variables - just looking at group & Id (take extra out)
sd[1:5, ]  # Show the first 5 cases
sd
sd[1:5, ]  # Show the first 5 cases
hist(sd$extra, col = "lightgray")
boxplot(extra ~ group, data = sd)
boxplot.stats(extra ~ group, data = sd)
boxplot.stats(sleep$extra ~ sleep$group)
t.test(extra ~ group, data = sd)
t.test(extra ~ group,
data = sd,
alternative = "less",  # One-tailed test
conf.level = 0.80)
x <- rnorm(30, mean = 20, sd = 5)
y <- rnorm(30, mean = 22, sd = 5)
t.test(x, y)
rm(list = ls())  # Clean up
dev.off()
rm(list = ls())  # Clean up
?sleep
data(sleep)
sleep[1:10, ]
sd <- sleep[ ,1:2]
sd[1:10, ]
hist(sd$extra)
hist(sd$extra, col = "blue") # - missing bin - coloring  will help you see it
hist(sd$extra, col = "darkblue") # - missing bin - coloring  will help you see it
boxplot(extra ~ group, data = sd)
t.test(extra ~ group, data = sd)
t.test(extra ~ group,
data = sd,
alternative = "less",  # One-tailed test
conf.level = 0.80)  # 80% CI (vs. 95%)
x <- rnorm(30, mean = 20, sd = 5)
y <- rnorm(30, mean = 25, sd = 5)
x[1:10, ]
x[1:10]
y[1:10]
t.test(x ~ y)
t.test(x,y)
t.test(x,y)
t.test(x,y)
x <- rnorm(30, mean = 20, sd = 5)
y <- rnorm(30, mean = 22, sd = 5)
t.test(x, y)
t.test(x, y)
rm(list = ls())  # Clean up
t.test(x,y)
x <- rnorm(30, mean = 20, sd = 5)
x[1:10]
y <- rnorm(30, mean = 25, sd = 5)
t.test(x,y)
rm(list = ls())
dev.off()
