?Titanic
Titanic
ftable(Titanic)  # Makes "flat" table
tdf <- as.data.frame(lapply(as.data.frame.table(Titanic), function(x)rep(x, as.data.frame.table(Titanic)$Freq)))[, -5]
tdf[1:5, ]  # Check first five rows of data
ttab <- table(tdf$Class, tdf$Survived)
ttab
round(prop.table(ttab, 1), 2) * 100 # row %
round(prop.table(ttab, 2), 2) * 100 # column %
round(prop.table(ttab), 2) * 100    # cell %
tchi <- chisq.test(ttab)
tchi
tchi$observed   # Observed frequencies (same as ttab)
tchi$expected   # Expected frequencies
tchi$residuals  # Pearson's residual
tchi$stdres     # Standardized residual
rm(list = ls())  # Clean up
?Titanic
rm(list = ls())  # Clean up
data("Titanic")
Titanic
str(Titanic)
View(Titanic)
tdf <- as.data.frame(lapply(as.data.frame.table(Titanic), function(x)rep(x, as.data.frame.table(Titanic)$Freq)))
tdf
rm(tdf)
tdf1 <- as.data.frame(lapply(as.data.frame.table(Titanic), function(x)rep(x, as.data.frame.table(Titanic)$Freq)))
tdf1
tdf <- as.data.frame(lapply(as.data.frame.table(Titanic), function(x)rep(x, as.data.frame.table(Titanic)$Freq)))[, -5]
View(tdf)
View(tdf)
View(tdf1)
View(tdf1)
tdf[5,]
tdf[:5,]
tdf[5, ]
tdf[1:5, ]
ttab <- table[tdf$Class, tdf$Survived]
ttab <- table(tdf$Class, tdf$Survived)
ttab
row <- round(prop.table(ttab),2)
row
row <- round(prop.table(ttab),2) * 100
row
rm(row)
prop.table(ttab, 1)
ttab
prop.table(ttab, 1)
prop.table(ttab, 2)
?prop.table
row <- round(prop.table(ttab, 1), 2)
row
row * 100
tchi <- chisq.test(ttab)
tchi
tchi$observed
tchi$expected
round((tchi$expected), 2)
tchi$residuals
tchi$stdres
rm(list = ls())
help(package = "robust")
help(package = "robust")
help(package = "robustbase")
help(package = "MASS")  # See rlm ("robust linear model")
help(package = "robust")
help(package = "robustbase")
help(package = "MASS")  # See rlm ("robust linear model")
help(package = "quantreg")  # Quantile regression
install.packages("quantreg")
require(quantreg)
?rq  # Help on "quantile regression" in quantreg package
data(engel)
?engel
attach(engel)
plot(income,  # Create plot frame
foodexp,
xlab = "Household Income",
ylab = "Food Expenditure",
type = "n",
cex = .5)
points(income,  # Points in plot
foodexp,
pch = 16,
col = "lightgray")
taus <- c(.05, .1, .25, .75, .9, .95)  # Quantiles
xx <- seq(min(income), max(income), 100)  # X values
taus
xx
f <- coef(rq((foodexp)~(income), tau=taus))  # Coefficients
f
yy <- cbind(1, xx)%*%f  # Y values
yy
for(i in 1:length(taus)){  # For each quantile value...
lines(xx, yy[, i], col = "darkgray")  # Draw regression
}
for(i in 1:length(taus)){  # For each quantile value...
lines(xx, yy[, i], col = "black")  # Draw regression
}
abline(lm(foodexp ~ income),  # Standard LS regression
col = "darkred",
lwd = 2)
abline(rq(foodexp ~ income),  # Median regression
col = "blue",
lwd = 2)
legend(3000, 1000,  # Plot legend
c("mean fit", "median fit"),
col = c("darkred", "blue"),
lty = 1,
lwd = 2)
detach(engel)
detach("package:robust", unload=TRUE)
detach("package:quantreg", unload=TRUE)
detach("package:MASS", unload=TRUE)
detach("package:rrcov", unload=TRUE)
rm(list = ls())
dev.off()
require(quantreg)
?rq  # Help on "quantile regression" in quantreg package
?engel
attach(engel) # Way of making short cut references
data(engel)
attach(engel) # Way of making short cut references
plot(income,  # Create plot frame
foodexp,
xlab = "Household Income",
ylab = "Food Expenditure",
type = "n",
cex = .5)
points(income,  # Points in plot
foodexp,
pch = 16,
col = "lightgray")
taus <- c(.05, .1, .25, .75, .9, .95)  # Quantiles
xx <- seq(min(income), max(income), 100)
for(i in 1:length(taus)){  # For each quantile value...
lines(xx, yy[, i], col = "black")  # Draw regression
}
f <- coef(rq((foodexp)~(income), tau=taus))  # Coefficients
f
yy <- cbind(1, xx)%*%f  # Y values
yy
for(i in 1:length(taus)){  # For each quantile value...
lines(xx, yy[, i], col = "black")  # Draw regression
}
abline(lm(foodexp ~ income),  # Standard LS regression
col = "darkred",
lwd = 2)
abline(rq(foodexp ~ income),  # Median regression
col = "blue",
lwd = 2) # two pixel stick
legend(3000, 1000,  # Plot legend
c("mean fit", "median fit"), # what to plot
col = c("darkred", "blue"),
lty = 1, # solid line = 1
lwd = 2) # 2 pixel thick
detach(engel)
detach("package:robust", unload=TRUE)
detach("package:quantreg", unload=TRUE)
detach("package:MASS", unload=TRUE)
detach("package:rrcov", unload=TRUE)
rm(list = ls())
dev.off()
require(quantreg)
data(engel)
View(engel)
View(engel)
?engel
attach(engel)
plot(income, # create plot frame
foodexp,
xlab = "Household Income",
ylab = "Food Expenditure",
type = "n",
cex = 1)
plot(income, # create plot frame
foodexp,
xlab = "Household Income",
ylab = "Food Expenditure",
type = "n",
cex = .5)
plot(income, # create plot frame
foodexp,
xlab = "Household Income",
ylab = "Food Expenditure",
type = "n",
cex = 5)
?cex
plot(income, # create plot frame
foodexp,
xlab = "Household Income",
ylab = "Food Expenditure",
type = "n",
cex = .5)
points(income, # Points in plot
foodexp,
pch = 20, # pch= option to specify symbols to use when plotting points
col = "darkblue")
browsURL("https://www.statmethods.net/advgraphs/parameters.html")
browseURL("https://www.statmethods.net/advgraphs/parameters.html")
taus <- c(.05, .1, .25, .75, .9, .95)
taus
xx <- seq(min(income), max(income), 100)
f <- coef(rq(foodexp)~(income), tau=taus) # Coefficients
yy <- cbind(1, xx)%*%f # Y values
xx <- seq(min(income), max(income), 100)
f <- coef(rq(foodexp)~(income), tau=taus) # Coefficients
yy <- cbind(1, xx)%*%f # Y values
yy <- cbind(1, xx)%*%f
f
rm(f)
f <- coef(rq((foodexp)~(income), tau=taus)) # Coefficients
f
yy <- cbind(1, xx)%*%f
for(i in 1: length(taus)){
lines(xx, yy[, i], col = "dark gray")
}
for(i in 1: length(taus)){
lines(xx, yy[, i], col = "darkgray")
}
abline(lm(foodexp ~ income),
col = "darkred",
lwd = 2)
abline(rq(foodexp ~ income),
col = "lightgreen",
lwd = 2)
legend(3000, 1000,
c("mean fit", "median fit"),
col = c("darkred", "lightgreen"),
lty = 1,
lwd = 2)
legend(3000, 1000,  # Plot legend
c("mean fit", "median fit"), # what to plot
col = c("darkred", "blue"),
lty = 1, # solid line = 1
lwd = 2) # 2 pixel thick
legend(3000, 1000,
c("mean fit", "median fit"),
col = c("darkred", "green"),
lty = 1,
lwd = 2)
abline(rq(foodexp ~ income),
col = "green",
lwd = 2)
detach(engel)
detach("package:quantreg", unload = TRUE)
rm(list = ls())
dev.off()
