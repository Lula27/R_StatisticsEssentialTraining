browseURL(https://stats.idre.ucla.edu/other/mult-pkg/faq/general/faq-what-are-the-differences-between-one-tailed-and-two-tailed-tests/)
browseURL("https://stats.idre.ucla.edu/other/mult-pkg/faq/general/faq-what-are-the-differences-between-one-tailed-and-two-tailed-tests/")
?state.area
data(state.area)  # Gets error message
area <- state.area  # But can save as vector
area
str(area)
hist(area)
boxplot(area)
boxplot.stats(area)
mean(area)  # NOT robust
median(area)
mean(area, trim = .05)  # 5% from each end (10% total)
mean(area, trim = .10)  # 10% from each end (20% total)
mean(area, trim = .20)  # 20% from each end (40% total)
mean(area, trim = .50)  # 50% from each end = median
sd(area)  # NOT robust
mad(area)  # Median absolute deviation
IQR(area)  # Interquartile range (Can select many methods)
fivenum(area)  # Tukey's hinges (similar to quartiles)
browseURL("http://j.mp/12YPV5L")
browseURL("http://cran.r-project.org/web/views/Robust.html")
rm(list = ls())
?state.area
data(state.area)
area <- state.area
str(area)
area
hist(area)
boxplot(area)
boxplot.stats(area)
summary(area)
mean(area)
med(area)
median(area)
mean(area, trim = .05)  # 5% from each end (10% total)
mean(area) # = 72368
mean(area, trim = .10)   # 10% from each end (20% total)
mean(area, trim = .20)   # 20% from each end (40% total) # suggested by researcher
mean(area, trim = .50)   # 50% from each end = median
mean(area, trim = .40)
sd(area)
mad(area)
IQR(area)
Tukey(area)
fivenum(area)
rm(list = ls())
data("mtcars")
mph <- mtcars$mpg
mph
horsepower <- mtcars$hp
qsec <- mtcars$qsec
summary(mph)
require(psych)
describe(mph)
describe(horsepower)
describe(qsec)
View(mtcars)
View(mtcars)
summary(mph)
str(mtcars)
descriptivevalues <- describe(mtcars[c(1, 4, 7)])
descriptivevalues
descriptivevalues <- describe(mtcars[, c(1, 4, 7)])
descriptivevalues
rm(descriptivevalues)
descriptivevalues <- describe(mtcars[c(1, 4, 7)])
descriptivevalues
rm(descriptivevalues)
descriptivevalues
require(psych)
descriptivevalues <- describe(mtcars[c(1, 4, 7)])
descriptivevalues
descriptivevalues[, c(3, 4, 11, 12)]
rm(list = ls())
require("datasets")
?rivers
data(rivers)  # Lengths of Major North American Rivers
hist(rivers)
boxplot(rivers, horizontal = TRUE)
boxplot.stats(rivers)
rivers.low  <- rivers[rivers < 1210]  # Remove outliers
boxplot(rivers.low, horizontal = TRUE)  # Has new outliers
boxplot.stats(rivers.low)
rivers.low2  <- rivers[rivers < 1055]  # Remove again
rm(list = ls())  # Clean up
OS <- read.csv("C:\\Users\\loret\\Desktop\\DataSciencePrep\\R\\R_StatisticsEssentialTraining\\Exercise Files\\Ch04\\04_01\\OS.csv", header = TRUE)
View(OS)
OS.hi <- subset(OS, Proportion > 0.1)
View(OS.hi)
View(OS.hi)
?subset()
OS <- read.csv("C:\\Users\\loret\\Desktop\\DataSciencePrep\\R\\R_StatisticsEssentialTraining\\Exercise Files\\Ch04\\04_01\\OS.csv", header = TRUE)
view(OS)
View(OS)
view(OS)
View(OS) # Note - View is case sensitive - first letter must be capitalized
OS # Look in console
?subset()
?subset()
OS.hi <- subset(OS, Proportion > .10)
View(OS.hi)
rm(OS.hi)
OS.hi <- subset(OS, Proportion < .10)
View(OS.hi)
rm(OS.hi)
OS.hi <- subset(OS, Proportion > .10)
require("datasets")
?rivers
rm(list = ls())
?rivers
data(rivers)
hist(rivers)
boxplot(rivers, horizontal = TRUE)
boxplot.stats(rivers)
boxplot(rivers, horizontal = TRUE)
boxplot.stats(rivers)
View(rivers)
smallRivers <- rivers[rivers < 1210]
smallRivers
boxplot(smallRivers)
boxplot(smallRivers, horizontal = TRUE)
smallerRivers <- smallRivers[smallRivers < 1055]
boxplot.stats(smallRivers)
boxplot(smallerRivers, horizontal = TRUE)
boxplot(smallerRivers)
boxplot.stats(smallerRivers)
rm(smallerRivers)
smallerRivers <- rivers[rivers < 1055]
boxplot(smallerRivers, horizontal = TRUE)
smallest <- smallerRivers[smallerRivers < 1055]
boxplot(smallest, horizontal = TRUE)
boxplot(smallerRivers, horizontal = TRUE)
boxplot.stats(smallerRivers)
boxplot.stats(smallest)
drop(smallest)
rm(list = ls())  # Clean up
require("datasets")
dev.off()
require("datasets")
?islands
hist(islands, breaks = 16)
boxplot(islands)
islands.z <- scale(islands)  # M = 0, SD = 1
islands.z  # Makes matrix with attribute information
hist(islands.z, breaks = 16)  # Histogram of z-scores
boxplot(islands.z)  # Boxplot of z-scores
mean(islands.z)  # M should equal 0
round(mean(islands.z), 2)  # Round off to see M = 0
sd(islands.z)  # SD = 1
attr(islands.z, "scaled:center")  # Show original mean
attr(islands.z, "scaled:scale")  # Showoriginal SD
islands.z <- as.numeric(islands.z)  # Converts from matrix back to numeric
islands.z
islands.ln <- log(islands)  # Natural log (base = e)
hist(islands.ln)
boxplot(islands.ln)
islands.rank1 <- rank(islands)
hist(islands.rank1)
boxplot(islands.rank1)
ties.method = c("average", "first", "random", "max", "min")
ties.method
rm(ties.method)
islands.rank2 <- rank(islands, ties.method = "random")
hist(islands.rank2)
boxplot(islands.rank2)
continent <- ifelse(islands > 1000, 1, 0)
continent
rm(list = ls())  # Clean up
dev.off()
rm(list = ls())  # Clean up
require("datasets")
?islands
data("islands")
View(islands)
hist(islands, breaks = 16)
?scale
islands.z <- scale(islands)
islands.z
hist(islands.z)
boxplot(islands.z)
boxplot.stats(islands.z)
mean(islands.z)
round(mean(islands.z), 2)
sd(islands.z)
islands.z
attr(islands.z, "scaled:center")  # Show original mean
attr(islands.z, "scaled:scale")   # show orinal sd - scale
islands.z <- as.numeric(islands.z)#islands.z <- as.numeric(islands.z)  # Converts from matrix back to numeric
islands.z
?log()
islands.ln <- log(islands)
islands.ln
hist(islands.ln)
boxplot(islands.ln)
sq <- (islands.ln)^2
sq
?rank()
islands.rank1 <- rank(islands)
islands.rank1
hist(islands.rank1)
boxplot(islands.rank1)
browseURL('https://stats.stackexchange.com/questions/34008/how-does-ties-method-argument-of-rs-rank-function-work')
hist(islands.rank2)
islands.rank2 <- rank(islands.rank2, ties.method = "random")
islands.rank2 <- rank(islands, ties.method = "random")
hist(islands.rank2)
boxplot(islands.rank2)
continent <- ifelse(islands > 1000, 1, 0)
continent
rm(list = ls())
dev.off()
